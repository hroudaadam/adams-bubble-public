<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://adamsbubble.com//feed.xml" rel="self" type="application/atom+xml" /><link href="https://adamsbubble.com//" rel="alternate" type="text/html" /><updated>2023-10-30T08:45:21+01:00</updated><id>https://adamsbubble.com//feed.xml</id><title type="html">Adam‚Äôs Bubble</title><author><name>Adam Hrouda</name><email>hroudaadam@gmail.com</email></author><entry><title type="html">Import SharePoint data to Fabric</title><link href="https://adamsbubble.com//posts/import-sharepoint-data-to-fabric" rel="alternate" type="text/html" title="Import SharePoint data to Fabric" /><published>2023-10-30T08:00:00+01:00</published><updated>2023-10-30T08:00:00+01:00</updated><id>https://adamsbubble.com//posts/import%20sharepoint%20data%20to%20fabric</id><content type="html" xml:base="https://adamsbubble.com//posts/import-sharepoint-data-to-fabric"><![CDATA[<p><em>Before you continue reading the article, I would like to point out that it already assumes certain knowledge of APIs, Python, SharePoint, Microsoft Fabric</em></p>

<p>Let‚Äôs have a <strong>SharePoint list</strong> as a data source and a <strong>Fabric Lakehouse</strong> as a storage for analytics data. But how do we get the data from point A to point B? Microsoft Fabric offers the following options:</p>
<ul>
  <li>Copy activity in pipelines</li>
  <li>Dataflows Gen v2</li>
  <li>Apache Spark Notebook / Job definition</li>
</ul>

<p>In this article, I will explain the last option, which is to import using <strong>Apache Spark Notebook</strong>, specifically using Python. However, I won‚Äôt go into comparing the other options or transforming the data. I believe other someone will look into it ü§ì</p>

<p>The data in SharePoint is available through an API, which is of course secure. To make it not too easy there are even two APIs in use - <a href="https://learn.microsoft.com/en-us/graph/api/resources/sharepoint?view=graph-rest-1.0">Microsoft Graph API</a> and <a href="https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/get-to-know-the-sharepoint-rest-service">SharePoint REST API</a>.</p>

<table>
  <thead>
    <tr>
      <th><strong>SharePoint REST API</strong></th>
      <th><strong>Microsoft Graph API</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>older, used by the SharePoint Online</td>
      <td>more modern, unified interface, wrapper for SharePoint REST API</td>
    </tr>
    <tr>
      <td>exposes many endpoints</td>
      <td>exposes only a small part of the endpoints, still being developed</td>
    </tr>
    <tr>
      <td>supports expanding complex columns (e.g. Person, Lookup)</td>
      <td>does not support expanding complex columns</td>
    </tr>
    <tr>
      <td>uses internal column names</td>
      <td>uses display column names</td>
    </tr>
    <tr>
      <td>complicated authentication settings</td>
      <td>easier to set up authentication</td>
    </tr>
  </tbody>
</table>

<p>Before we start implementing data import, we need to decide which API to use. I decided to use the <strong>SharePoint REST API</strong>.</p>

<p>The first reason is that it works with <strong>internal column names</strong>, which ensures that the import mechanism doesn‚Äôt break the moment someone changes the display name of a column.</p>

<p>The second reason is the support for <strong>column expansion</strong>, this benefit is important because of Person columns. SharePoint stores the user ID in the Person column, but it is not an global ID from Azure Active Directory, it is an <strong>integer ID specific to SharePoint only</strong>. In order to relate user data from SharePoint with other systems, we need a better identifier, e.g. email, which we can get just by expanding the field. In the case of the Graph API it would be more complicated, to get the user‚Äôs email from their ID we would have to look at a special hidden list in SharePoint called the <strong>User Information List</strong>. Which makes the whole process more complicated and also slows it down! üòï</p>

<p><img src="/assets/images/posts/2023-10-29-import sharepoint data to fabric/api-expand.svg" alt="expanding fields" /></p>

<p>So it‚Äôs decided to import using Python and use SharePoint REST API for that. What next? ü§î</p>

<p>Now we need to setup <strong>authentication</strong>. Since the data import takes place without the user‚Äôs interaction, we want to use the <a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow">Client Credentials Flow</a>. If we use the Microsoft Graph API, we would only need to create a new application object in Azure AD and set the required scopes. For the SharePoint REST API, <a href="https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azureacs">the process is different</a>.</p>

<p>The application object is created <strong>directly in SharePoint</strong> using the following link: <br />
<a href="https://{org-domain}-admin.sharepoint.com/_layouts/15/appregnew.aspx">https://{org-domain}-admin.sharepoint.com/_layouts/15/appregnew.aspx</a> <br />
A form is displayed, which you fill out as follows. The <em>client id</em> and the <em>client secret</em> are set after selecting the <em>generate</em> buttons and the <em>title</em> field is completely up to you.</p>

<p>‚ùóIt is important to securely save the <em>client id</em> and <em>secret</em>‚ùó</p>

<p><img src="/assets/images/posts/2023-10-29-import sharepoint data to fabric/regnew-form.png" alt="appregnew form" width="300" /></p>

<p>In case you are unable to create the application object, make sure that you are logged in as <strong>SharePoint Admin</strong> and also that it is <strong>allowed to create application objects</strong> in your tenant. Alternatively, the tenant settings can be changed using following PowerShell script.</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">Install-Module</span><span class="w"> </span><span class="nx">PnP.PowerShell</span><span class="w">
</span><span class="n">Connect-PnPOnline</span><span class="w"> </span><span class="nt">-Url</span><span class="w"> </span><span class="s2">"{org-domain}-admin.sharepoint.com"</span><span class="w"> </span><span class="nt">-Interactive</span><span class="w">
</span><span class="n">Set-PnPTenant</span><span class="w"> </span><span class="nt">-DisableCustomAppAuthentication</span><span class="w"> </span><span class="bp">$false</span></code></pre></figure>

<p>Once the application object registration is complete, you must <strong>grant it permissions</strong> at the link: <br />
<a href="https://{org-domain}-admin.sharepoint.com/_layouts/15/appinv.aspx">https://{org-domain}-admin.sharepoint.com/_layouts/15/appinv.aspx</a> <br />
In the form, just fill in the <em>app id</em> (<em>client id</em> from previous step) and after pressing the <em>lookup</em> button, the details of the object will be filled in. In the last field, just add the following definition that will grant <strong>full control</strong> to the client app. Setting up restricted access is documented on <a href="https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/add-in-permissions-in-sharepoint">this link</a>.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;AppPermissionRequests</span> <span class="na">AllowAppOnlyPolicy=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;AppPermissionRequest</span> <span class="na">Scope=</span><span class="s">"http://sharepoint/content/tenant"</span> <span class="na">Right=</span><span class="s">"FullControl"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/AppPermissionRequests&gt;</span></code></pre></figure>

<p><img src="/assets/images/posts/2023-10-29-import sharepoint data to fabric/appinv-form.png" alt="appinv form" width="280" /></p>

<p>After pressing the <em>create</em> button, you must confirm the permissions in the dialog using the <em>trust it</em> button.</p>

<p>Now we have created the application object and we can move to Fabric, where we need a workspace in which the <strong>Lakehouse</strong> and <strong>Notebook</strong> are created and linked.</p>

<p>In order to query the SharePoint API we will need an <strong>access token</strong>. We can get it using this custom <code class="language-html highlighter-rouge">get_access_token</code> function, which sends <strong>POST</strong> request to OAuth endpoint with client credentials in the body and returns access token.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">requests</span>

<span class="k">def</span> <span class="nf">get_access_token</span><span class="p">(</span><span class="n">tenant_id</span><span class="p">,</span> <span class="n">client_id</span><span class="p">,</span> <span class="n">client_secret</span><span class="p">,</span> <span class="n">org_domain</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">https://accounts.accesscontrol.windows.net/</span><span class="si">{</span><span class="n">tenant_id</span><span class="si">}</span><span class="s">/tokens/OAuth/2</span><span class="sh">"</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">Content-Type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">application/x-www-form-urlencoded</span><span class="sh">'</span><span class="p">}</span>
    <span class="n">body</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">grant_type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">client_credentials</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">client_id</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">client_id</span><span class="si">}</span><span class="s">@</span><span class="si">{</span><span class="n">tenant_id</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">client_secret</span><span class="sh">"</span><span class="p">:</span> <span class="n">client_secret</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">resource</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">00000003-0000-0ff1-ce00-000000000000/</span><span class="si">{</span><span class="n">org_domain</span><span class="si">}</span><span class="s">.sharepoint.com@</span><span class="si">{</span><span class="n">tenant_id</span><span class="si">}</span><span class="sh">"</span>
    <span class="p">}</span>

    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="sh">"</span><span class="s">POST</span><span class="sh">"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">body</span><span class="p">)</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

<span class="n">jwt_token</span> <span class="o">=</span> <span class="nf">get_access_token</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">tenant-id</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">client-id</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">client-secret</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">org-domain</span><span class="sh">"</span>
<span class="p">)[</span><span class="sh">"</span><span class="s">access_token</span><span class="sh">"</span><span class="p">]</span>
<span class="n">sharepoint_access_token</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Bearer </span><span class="si">{</span><span class="n">jwt_token</span><span class="si">}</span><span class="sh">"</span></code></pre></figure>

<p>Test the access token retrieval. If you receive the error message <em>‚ÄúToken type is not allowed‚Äù</em>, you must enable <em>Custom app authentication</em> using PowerShell as described when creating the application object.</p>

<p>By the way, I strongly recommend saving the <em>client id</em> and <em>secret</em> in <strong>Azure Key Vault</strong> and retrieving them in the notebook directly from Key Vault as follows.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">client_id</span> <span class="o">=</span> <span class="n">mssparkutils</span><span class="p">.</span><span class="n">credentials</span><span class="p">.</span><span class="nf">getSecret</span><span class="p">(</span><span class="sh">"</span><span class="s">keyvault-url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">secret-name</span><span class="sh">"</span><span class="p">)</span>
<span class="n">client_secret</span> <span class="o">=</span> <span class="n">mssparkutils</span><span class="p">.</span><span class="n">credentials</span><span class="p">.</span><span class="nf">getSecret</span><span class="p">(</span><span class="sh">"</span><span class="s">keyvault-url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s"> secret-name</span><span class="sh">"</span><span class="p">)</span></code></pre></figure>

<p>Now we can finally <strong>retrieve data</strong> from a SharePoint list using the SharePoint REST API. To do this, we will need information about the list being loaded, specifically <em>list ID</em> and the <em>site name</em>. Both values can be read from the URL of the <strong>SharePoint list‚Äôs settings page</strong>, which is as follows: <br />
<a href="https://{org-domain}.sharepoint.com/sites/{site-name}/_layouts/15/listedit.aspx?List=%7B{list-id}%7D">https://{org-domain}.sharepoint.com/sites/{site-name}/_layouts/15/listedit.aspx?List=%7B{list-id}%7D</a></p>

<p>Once we have these values, we can implement <code class="language-html highlighter-rouge">get_all_list_items</code> function.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_all_list_items</span><span class="p">(</span><span class="n">org_domain</span><span class="p">,</span> <span class="n">site_name</span><span class="p">,</span> <span class="n">list_id</span><span class="p">,</span> <span class="n">select</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="sh">""</span><span class="p">):</span>
    <span class="c1"># compose url
</span>    <span class="n">base_url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">https://</span><span class="si">{</span><span class="n">org_domain</span><span class="si">}</span><span class="s">.sharepoint.com/sites/</span><span class="si">{</span><span class="n">site_name</span><span class="si">}</span><span class="s">/_api</span><span class="sh">"</span>
    <span class="n">relative_url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">/web/lists(guid</span><span class="sh">'</span><span class="si">{</span><span class="n">list_id</span><span class="si">}</span><span class="sh">'</span><span class="s">)/items?$select=</span><span class="si">{</span><span class="n">select</span><span class="si">}</span><span class="s">&amp;$expand=</span><span class="si">{</span><span class="n">expand</span><span class="si">}</span><span class="s">&amp;$top=5000</span><span class="sh">"</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">base_url</span> <span class="o">+</span> <span class="n">relative_url</span>

    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">Authorization</span><span class="sh">"</span><span class="p">:</span> <span class="n">sharepoint_access_token</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Accept</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">application/json; odata=nometadata</span><span class="sh">"</span>
    <span class="p">}</span>

    <span class="n">data_pages</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">fetch_next</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="c1"># iterate pages
</span>    <span class="k">while</span> <span class="n">fetch_next</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="sh">"</span><span class="s">GET</span><span class="sh">"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

        <span class="n">data_pages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">response_data</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">response_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">odata.nextLink</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">fetch_next</span> <span class="o">=</span> <span class="n">url</span> <span class="o">!=</span> <span class="bp">None</span>          

    <span class="c1"># flatten
</span>    <span class="k">return</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">data_pages</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">page</span><span class="p">]</span>

<span class="n">items</span> <span class="o">=</span> <span class="nf">get_all_list_items</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">{org-name}</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">{site-name}</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">{list-id}</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">ID, Title, Author/EMail</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">Author</span><span class="sh">"</span>
<span class="p">)</span></code></pre></figure>

<p>First of all, I would like to mention <strong>pagination</strong>. The endpoint for reading list items returns a maximum of <strong>5000</strong> items. If there are more records in the list, the returned response contains <em>odata.nextLink</em> with a link to another page. Thus, the <code class="language-html highlighter-rouge">get_all_list_items</code> function keeps calling the endpoint while more pages are available and then combines the results into a single list which it returns.</p>

<p>There is also a <strong>select</strong> and <strong>expand</strong> parameter. In select we specify which columns should be returned. Since we are querying for a nested value in a complex column (<em>Author/Email</em> ), it is necessary to expand the complex column. Lookup columns work the same way.</p>

<p>Result looks like this:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"Author"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"EMail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AdeleN@k7pk.onmicrosoft.com"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="nl">"Title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Train ML model"</span><span class="p">,</span><span class="w"> </span><span class="nl">"ID"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"Author"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"EMail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AdeleN@k7pk.onmicrosoft.com"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="nl">"Title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Create IM web app"</span><span class="p">,</span><span class="w"> </span><span class="nl">"ID"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"Author"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"EMail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"admin@k7pk.onmicrosoft.com"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="nl">"Title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Create my first PWA"</span><span class="p">,</span><span class="w"> </span><span class="nl">"ID"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<p>In order to save the data to Lakehouse, we need to <strong>create a dataframe</strong> with a schema. The schema is important so we can later <strong>flatten</strong> the data structure (get rid of the nested <em>Author/EMail</em> ).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">items_schema</span> <span class="o">=</span> <span class="nc">StructType</span><span class="p">([</span>
    <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">ID</span><span class="sh">"</span><span class="p">,</span> <span class="nc">IntegerType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
    <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">Title</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
    <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">Author</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StructType</span><span class="p">([</span>
        <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">EMail</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">)</span>
    <span class="p">]),</span> <span class="bp">True</span><span class="p">)</span>
<span class="p">])</span>

<span class="n">items_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">createDataFrame</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">schema</span><span class="o">=</span><span class="n">items_schema</span><span class="p">)</span></code></pre></figure>

<p>Finally, now we just have to flatten the structure using the select method and then <strong>save the data</strong> into a table in Lakehouse.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">items_df</span> <span class="o">=</span> <span class="n">items_df</span><span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="sh">"</span><span class="s">ID</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Title</span><span class="sh">"</span><span class="p">,</span> <span class="nf">col</span><span class="p">(</span><span class="sh">"</span><span class="s">Author.EMail</span><span class="sh">"</span><span class="p">).</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">Email</span><span class="sh">"</span><span class="p">))</span>
<span class="n">items_df</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="nf">mode</span><span class="p">(</span><span class="sh">"</span><span class="s">overwrite</span><span class="sh">"</span><span class="p">).</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">option</span><span class="p">(</span><span class="sh">"</span><span class="s">overwriteSchema</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">Tables/Ideas</span><span class="sh">"</span><span class="p">)</span></code></pre></figure>

<p>And here goes the result! ü•≥</p>

<p><img src="/assets/images/posts/2023-10-29-import sharepoint data to fabric/deltatable.png" alt="delta table" width="550" /></p>

<p>To sum it up üòµ‚Äçüí´ We were able to retrieve data from a <strong>SharePoint list</strong> without user interaction with respect to <strong>pagination</strong>, plus we were able to <strong>expand</strong> complex columns, flatten the data structure and <strong>save it as a table in Fabric Lakehouse</strong>. Now you just need to set up a schedule ‚åö or plug the notebook into the pipeline and you can start building your ELT/ETL process!</p>

<p>Finally, I would like to add that in the case of implementation for many data sources, a lot of redundant source code can be generated. I address this issue in my repository <a href="https://github.com/hroudaadam/fabric-sharepoint-import">fabric-sharepoint-import</a>.</p>]]></content><author><name>Adam Hrouda</name><email>hroudaadam@gmail.com</email></author><category term="sharepoint" /><category term="fabric" /><category term="python" /><summary type="html"><![CDATA[How to import all items from SharePoint to Fabric Lakehouse? And how to expand complex columns like Lookup and Person?]]></summary></entry><entry><title type="html">StartUp screen pattern in Canvas Apps</title><link href="https://adamsbubble.com//posts/startup-screen-pattern" rel="alternate" type="text/html" title="StartUp screen pattern in Canvas Apps" /><published>2023-08-18T11:00:00+02:00</published><updated>2023-08-18T11:00:00+02:00</updated><id>https://adamsbubble.com//posts/startup%20screen%20pattern</id><content type="html" xml:base="https://adamsbubble.com//posts/startup-screen-pattern"><![CDATA[<p><em>Before you continue reading the article, I would like to point out that it already assumes certain knowledge of Power Apps concepts.</em></p>

<p>There are currently several options in Canvas Apps to trigger certain logic when the application starts. We have <code class="language-html highlighter-rouge">App.OnStart</code>, <code class="language-html highlighter-rouge">App.StartScreen</code> and <code class="language-html highlighter-rouge">Screen.OnVisible</code>. Beyond that, there are a few settings associated with these formulas. How to make sense of all this? ü§Ø And how should the data be loaded when the app starts? Let‚Äôs take a look.</p>

<p>Imagine a simple <strong>request approval application</strong>. We have two user roles - approver and requester. Both roles need common data to be loaded when they run the application ‚Äì a list of request types, application styling and navigation menu items. In addition, each role needs to be redirected to a different initial screen - the approver wants to see a list-view of their approvals and the requester wants to see a list-view of their requests. Related to this is the need for each to load different data when the application starts - the approver will load the requests that are pending his approval and the requester will load the requests he has created.</p>

<p>First, let‚Äôs look at the simplest part. <strong>Where to load screen-related data?</strong> The first option is <code class="language-html highlighter-rouge">App.OnStart</code>. In order to load the data only if the user has a certain role, a condition similar to this would have to be added.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// App.OnStart =</span>
<span class="nc">Switch</span><span class="p">(</span>
    <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">role</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">approver</span><span class="dl">"</span><span class="p">,</span>
    <span class="nc">Set</span><span class="p">(</span><span class="nx">varApprovals</span><span class="p">,</span> <span class="nc">Filter</span><span class="p">(</span><span class="nx">Approvals</span><span class="p">,</span> <span class="nx">Approver</span> <span class="o">=</span> <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Email</span><span class="p">),</span>
    <span class="dl">"</span><span class="s2">requester</span><span class="dl">"</span><span class="p">,</span>
    <span class="nc">Set</span><span class="p">(</span><span class="nx">varRequests</span><span class="p">,</span> <span class="nc">Filter</span><span class="p">(</span><span class="nx">Approvals</span><span class="p">,</span> <span class="nx">Requester</span> <span class="o">=</span> <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Email</span><span class="p">)</span>
<span class="p">);</span></code></pre></figure>

<p>It will work, of course, but once there are more roles in the application and more requests to load screen-related data, <code class="language-html highlighter-rouge">App.OnStart</code> will be very messy. Besides, data that is only related to one screen is stored in a global variable, that‚Äôs not right either.
Let‚Äôs try it another way. Let the data be loaded only in the <code class="language-html highlighter-rouge">Screen.OnVisible</code> formula for a specific screen. And instead of a global variable, let‚Äôs use a context variable so that the data is <strong>only available in the required scope</strong>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// scr_Approvals.OnVisible = </span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxApprovals</span><span class="p">:</span> <span class="nc">Filter</span><span class="p">(</span><span class="nx">Approvals</span><span class="p">,</span> <span class="nx">Approver</span> <span class="o">=</span> <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Email</span><span class="p">)</span>
<span class="p">});</span>

<span class="c1">// scr_Requests.OnVisible = </span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxApprovals</span><span class="p">:</span> <span class="nc">Filter</span><span class="p">(</span><span class="nx">Approvals</span><span class="p">,</span> <span class="nx">Requester</span> <span class="o">=</span> <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Email</span><span class="p">)</span>
<span class="p">});</span></code></pre></figure>

<p>Next, we will look at where to decide <strong>what screen the user should be redirected to</strong>. Previously, the <code class="language-html highlighter-rouge">Navigate</code> function in <code class="language-html highlighter-rouge">App.OnStart</code> was used. This is now impossible due to the <em>‚ÄòEnable Navigate function in App.OnStart‚Äô</em> setting, which is disabled as <a href="https://powerapps.microsoft.com/en-us/blog/app-startscreen-a-new-declarative-alternative-to-navigate-in-app-onstart/">recommended</a>. Instead, the <code class="language-html highlighter-rouge">App.StartScreen</code> property is available in which the following evaluation can be performed.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// App.StartScreen =</span>
<span class="nc">Switch</span><span class="p">(</span>
    <span class="nc">LookUp</span><span class="p">(</span><span class="nx">Users</span><span class="p">,</span> <span class="nx">Email</span> <span class="o">=</span> <span class="nc">User</span><span class="p">().</span><span class="nx">Email</span><span class="p">).</span><span class="nx">Role</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">approver</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">scr_Approvals</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">requester</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">scr_Requests</span>
<span class="p">)</span></code></pre></figure>

<p>But here comes <strong>another problem</strong>, what if we want to store the user role in a variable for later use. <strong>This is not possible</strong>, because <code class="language-html highlighter-rouge">App.StartScreen</code> is not a behavioral formula, so we cannot use the <code class="language-html highlighter-rouge">Set</code> function. Neither can we set a variable in <code class="language-html highlighter-rouge">App.OnStart</code> and use it in <code class="language-html highlighter-rouge">App.StartScreen</code>, because <code class="language-html highlighter-rouge">App.StartScreen</code> doesn‚Äôt support global variables. Therefore, it is necessary to perform <code class="language-html highlighter-rouge">LookUp</code> twice, once to evaluate <code class="language-html highlighter-rouge">App.StartScreen</code> and once to store it in a variable. That doesn‚Äôt sound too good, does it? ü§®</p>

<p>Before I present the solution for the variables and <code class="language-html highlighter-rouge">App.StartScreen</code>, let‚Äôs take a look at <strong>how to retrieve data common to the entire application</strong>. Of course, this data should be stored in a global variable and we can use the <code class="language-html highlighter-rouge">App.OnStart</code>. Which would look like this.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// App.OnStart =</span>
<span class="nc">Set</span><span class="p">(</span>
    <span class="nx">varApprovalType</span><span class="p">,</span>
    <span class="nc">Table</span><span class="p">(...)</span>
<span class="p">);</span>
<span class="nc">Set</span><span class="p">(</span>
    <span class="nx">varNavigationMenu</span><span class="p">,</span>
    <span class="nc">Table</span><span class="p">(...)</span>
<span class="p">);</span></code></pre></figure>

<p>It looks good, but if you need to load <strong>large amounts of data</strong>, there will be a problem. It will take users quite a long time to start the application (see <em>‚ÄòTime to first screen‚Äô</em> in the <a href="https://powerapps.microsoft.com/en-us/blog/powerapps-app-performance-report/">application analytics report</a>). However, this can be solved by enabling the <em>‚ÄòUse non-blocking OnStart rule‚Äô</em> setting. What this does is that it will run <code class="language-html highlighter-rouge">App.OnStart</code> and <code class="language-html highlighter-rouge">Screen.OnVisible</code> formulas in <strong>parallel</strong> when the app starts. If the setting is turned off, it always waits for <code class="language-html highlighter-rouge">App.OnStart</code> to finish before it starts evaluating <code class="language-html highlighter-rouge">Screen.OnVisible</code> - this is when the <em>‚ÄòTime to first screen‚Äô</em> is increased.</p>

<p>It almost looks like the <em>‚ÄòUse non-blocking OnStart rule‚Äô</em> will save us, but we might run into another problem. Let‚Äôs go back to our approval app and extend it with user groups. We want the approver to be able to <strong>see requests from other approvers in their group</strong> (e.g. HR). The user group should be stored in a global variable, so it can be used in other places in the application. Let‚Äôs do the following.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// App.OnStart =</span>
<span class="nc">Set</span><span class="p">(</span>
    <span class="nx">varCurrentUser</span><span class="p">,</span>
    <span class="nc">LookUp</span><span class="p">(</span><span class="nx">Users</span><span class="p">,</span> <span class="nx">Email</span> <span class="o">=</span> <span class="nc">User</span><span class="p">().</span><span class="nx">Email</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// scr_Approvals.OnVisible = </span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxApprovals</span><span class="p">:</span> <span class="nc">Filter</span><span class="p">(</span><span class="nx">Approvals</span><span class="p">,</span> <span class="nx">Approver</span><span class="p">.</span><span class="nx">Group</span> <span class="o">=</span> <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Group</span><span class="p">)</span>
<span class="p">});</span></code></pre></figure>

<p>Do you see the problem? ü§î <code class="language-html highlighter-rouge">scr_Approvals.OnVisible</code> depends on the <code class="language-html highlighter-rouge">varCurrentUser</code> variable that is set in <code class="language-html highlighter-rouge">App.OnStart</code>. But! <code class="language-html highlighter-rouge">scr_Approvals.OnVisible</code> and <code class="language-html highlighter-rouge">App.OnStart</code> are evaluated in <strong>parallel</strong>, so we may have a situation where <code class="language-html highlighter-rouge">scr_Approvals.OnVisible</code> starts evaluating and <code class="language-html highlighter-rouge">varCurrentUser</code> <strong>doesn‚Äôt contain data yet</strong>.</p>

<p>To give you an idea, I am attaching my little experiment üß™</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">38</span><span class="p">]</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OnStart</span><span class="p">:</span>      <span class="nx">Entering</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">38</span><span class="p">]</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OnStart</span><span class="p">:</span>      <span class="nx">Fetching</span> <span class="nx">data</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">38</span><span class="p">]</span> <span class="nx">Screen</span><span class="p">.</span><span class="nx">OnVisible</span><span class="p">:</span> <span class="nx">Entering</span>        <span class="c1">// Screen.OnVisible is being evaluated before App.OnStart has finished</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">38</span><span class="p">]</span> <span class="nx">Screen</span><span class="p">.</span><span class="nx">OnVisible</span><span class="p">:</span> <span class="nx">Fetching</span> <span class="nx">data</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OnStart</span><span class="p">:</span>      <span class="nx">Data</span> <span class="nx">fetched</span>    <span class="c1">// continue to evaluate App.OnStart</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OnStart</span><span class="p">:</span>      <span class="nx">Leaving</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="nx">Screen</span><span class="p">.</span><span class="nx">OnVisible</span><span class="p">:</span> <span class="nx">Data</span> <span class="nx">fetched</span>
<span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">02</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="nx">Screen</span><span class="p">.</span><span class="nx">OnVisible</span><span class="p">:</span> <span class="nx">Leaving</span></code></pre></figure>

<p>Finally, we come to the <strong>StartUp screen pattern</strong> that aims to solve most of the mentioned problems. This pattern is based on omitting the <code class="language-html highlighter-rouge">App.OnStart</code> formula, thus reducing the <em>‚ÄòTime to first screen‚Äô</em> to a minimum. Instead, a new screen <code class="language-html highlighter-rouge">scr_StartUp</code> will be created, which will be set as <code class="language-html highlighter-rouge">App.StartScreen</code>. All common variables will be set in the <code class="language-html highlighter-rouge">scr_StartUp.OnVisible</code> formula. The advantage is that at this point the <strong>app is already loaded</strong> and even though the data is still loading, you can already <strong>show some part of the interface</strong> to the user. Once everything in <code class="language-html highlighter-rouge">scr_StartUp.OnVisible</code> has been processed user must be <strong>redirected to the actual application screen</strong>. Unfortunately, you cannot use the <code class="language-html highlighter-rouge">Navigate</code> function in <code class="language-html highlighter-rouge">Screen.OnVisible</code> either. So you have to do something else. Fortunately, members of the <a href="https://powerusers.microsoft.com/t5/Power-Apps-Community/ct-p/PowerApps1">PowerApps community</a> üíú have already figured this out - just use <code class="language-html highlighter-rouge">Timer</code> named <code class="language-html highlighter-rouge">tim_StartUp</code>, which has following configuration.</p>

<p>Also I would like to remind you that you can disable <code class="language-html highlighter-rouge">App.OnStart</code> property in the settings üí°</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// scr_StartUp.OnVisible (last line!)</span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxStartUpTimer</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">ctxStartScreen</span><span class="p">:</span> <span class="nx">scr_Approvals</span>
<span class="p">});</span>

<span class="c1">// tim_StartUp.Start &amp; tim_StartUp.AutoStart</span>
<span class="nx">ctxStartUpTimer</span>

<span class="c1">// tim_StartUp.Repeat &amp; tim_StartUp.Reset &amp; tim_StartUp.Reset</span>
<span class="kc">false</span>

<span class="c1">// tim_StartUp.OnTimerStart</span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxStartUpTimer</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">});</span>
<span class="nc">Navigate</span><span class="p">(</span><span class="nx">ctxStartScreen</span><span class="p">);</span></code></pre></figure>

<p>To make this pattern clearer I am attaching a diagram.</p>

<p><img src="/assets/images/posts/2023-08-18-startup screen pattern/diagram.svg" alt="StartUp screen pattern diagram" /></p>

<p>To make it easier for the user to work with the application, don‚Äôt forget to add indicators on <code class="language-html highlighter-rouge">scr_StartUp</code> that the data is still being loaded. Such as progress overlay.</p>

<p>Let‚Äôs quickly return to the problem with <code class="language-html highlighter-rouge">App.StartScreen</code>. This can be solved very easily using the <strong>StartUp screen pattern</strong>. Just modify the above code to the following. This allows us to <strong>use global variables when selecting the intial screen</strong>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// scr_StartUp.OnVisible (last line!)</span>
<span class="nc">UpdateContext</span><span class="p">({</span>
    <span class="na">ctxStartUpTimer</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">ctxStartScreen</span><span class="p">:</span> <span class="nc">Switch</span><span class="p">(</span>
        <span class="nx">varCurrentUser</span><span class="p">.</span><span class="nx">Role</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">approver</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">scr_Approvals</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">requester</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">scr_Requests</span>
    <span class="p">)</span>
<span class="p">});</span></code></pre></figure>

<p>This design pattern therefore helps to <strong>solve the problem of loading data when the application starts</strong>. Let‚Äôs summarize its advantages:</p>
<ul>
  <li><strong>Application starts very quickly</strong> (minimizing the <em>‚ÄòTime to first screen‚Äô</em> )</li>
  <li><strong>Better code layout</strong> - we no longer have <code class="language-html highlighter-rouge">App.OnStart</code>, <code class="language-html highlighter-rouge">App.StartScreen</code> and <code class="language-html highlighter-rouge">scr_Initial.OnVisible</code>, but only <code class="language-html highlighter-rouge">scr_StartUp.OnVisible</code> and <code class="language-html highlighter-rouge">scr_Initial.OnVisible</code></li>
  <li><strong>Cleaner code</strong> - setting the global variables in <code class="language-html highlighter-rouge">scr_StartUp.OnVisible</code> and everything else only on the specific screens</li>
</ul>

<p>Finally, I would like to recommend that while creating a new application, start by implementing the <strong>StartUp screen pattern</strong>. This will make the work that would be required for later modifications easier. The exceptions, of course, are applications with only one screen.</p>

<p>A template using the <strong>StartUp screen pattern</strong> is available on this <a href="https://github.com/hroudaadam/adams-bubble-public/raw/master/downloads/StartUpScreenPattern.zip" target="_blank">link</a>.</p>]]></content><author><name>Adam Hrouda</name><email>hroudaadam@gmail.com</email></author><category term="power-platform" /><category term="canvas-apps" /><summary type="html"><![CDATA[How should the data be loaded when the app starts? When to use App.StartScreen, App.OnStart, Screen.OnVisible? Is there a more elagant way to load application data?]]></summary></entry></feed>